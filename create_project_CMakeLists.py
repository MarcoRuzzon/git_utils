#!/usr/bin/env python

import argparse
import yaml

parser = argparse.ArgumentParser(description="Create a project's CMakeLists.txt from the FILENAME yaml config file \
 generated by save_superbuild_config.py script. Then add this CMakeList.txt to a project and activate the project \
 during configuration. This will enable the repos as specified by the yaml file.")

parser.add_argument('REPOS_CONFIG_YAML', help="the yaml file containing repos and their activation state")
parser.add_argument('--cmake_min_version', metavar="VERSION", default="2.8.12", type=str)
parser.add_argument('--gitlab_advrcloud_base_address', metavar="ADDRESS", help="Address to use for ADVR cloud Gitlab git repositories",
                    default="ssh://git@gitlab.advrcloud.iit.it/", type=str)
parser.add_argument('--gitlab_advr_base_address', metavar="ADDRESS", help="Address to use for ADVR Gitlab git repositories", default="ssh://git@gitlab.advr.iit.it/", type=str)
parser.add_argument('--github_advr_base_address', metavar="ADDRESS", help="Address to use for ADVR Github git repositories", default="ssh://git@github.com/", type=str)
args = parser.parse_args()

with open(args.REPOS_CONFIG_YAML) as file:
    try:
        info = yaml.safe_load(file)

    except Exception as e:
        raise Exception('error in yaml parsing')

template = "find_or_build_package_with_tag({} {})\n"
with open('CMakeLists.txt', "w") as f:

    f.write("cmake_minimum_required(VERSION {})\n\n".format(args.cmake_min_version))
    f.write('set(YCM_GIT_GITHUB_BASE_ADDRESS "{}" CACHE STRING "Address to use for ADVR Github git repositories" FORCE)\n'.format(args.github_advr_base_address))
    f.write('set(YCM_GIT_GITLAB_ADVRCLOUD_BASE_ADDRESS "{}" CACHE STRING "Address to use for ADVR cloud Gitlab git repositories" FORCE)\n'.format(args.gitlab_advrcloud_base_address))
    f.write('set(YCM_GIT_GITLAB_ADVR_BASE_ADDRESS "{}" CACHE STRING "Address to use for ADVR Gitlab git repositories" FORCE)\n\n'.format(args.gitlab_advr_base_address))

    for item in info['repos']:
        f.write(template.format(item['name'], item['active']))
